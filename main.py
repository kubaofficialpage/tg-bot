import telebot
from telebot import types
import sqlite3
import pandas as pd
import random
import os
import time  # Importing time for simulating delay
from datetime import datetime

# Replace 'YOUR_BOT_TOKEN' with your actual bot token obtained from BotFather
bot = telebot.TeleBot('7280241870:AAFkYsIc0bd1Nf5Eb82uWc4igSqk09mehAM')

help_number = '+996 700 123 456'


# List of admin user IDs
admin_users = [1466032078, 987654321]  # Replace with actual admin user IDs

# Default warehouse address
default_warehouse_address = "16699582668\nÂπø‰∏úÁúÅ‰ΩõÂ±±Â∏ÇÂçóÊµ∑Âå∫ÈáåÊ∞¥Èïá\nÈáåÊ∞¥ÈïáÂõΩÂÆè‰∫ß‰∏öÂõ≠CÂå∫102B"

# Connect to SQLite database
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# Create tables if they don't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    chat_id INTEGER UNIQUE,
                    name TEXT,
                    person_code TEXT,
                    phone TEXT,
                    region TEXT
                  )''')
cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY,
                    product_code TEXT UNIQUE,
                    weight TEXT,
                    type TEXT
                  )''')

conn.commit()

# Handling /start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    user = cursor.fetchone()
    
    markup = types.InlineKeyboardMarkup()

    if not user:
        itembtn_register_person = types.InlineKeyboardButton('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥', callback_data='register_person')
        markup.add(itembtn_register_person)
    
    itembtn_search_product = types.InlineKeyboardButton('üîé –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data='search_product')
    itembtn_myprofile = types.InlineKeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
    itembtn_sendaddress = types.InlineKeyboardButton('üè¢ –ê–¥—Ä–µ—Å –≤ –ö–∏—Ç–∞–µ', callback_data='send_address')
    markup.add(itembtn_search_product)
    markup.add(itembtn_myprofile)
    markup.add(itembtn_sendaddress)
    
    if chat_id in admin_users:
        itembtn_register_product = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data='register_product')
        itembtn_user_list = types.InlineKeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='user_list')
        itembtn_product_list = types.InlineKeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='product_list')
        itembtn_template_file = types.InlineKeyboardButton('üìÑ –®–∞–±–ª–æ–Ω –¥–ª—è Excel —Ñ–∞–π–ª', callback_data='template_file')
        markup.add(itembtn_register_product)
        markup.add(itembtn_user_list)
        markup.add(itembtn_product_list)
        markup.add(itembtn_template_file)
    
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. \n –ú–µ–Ω—é üëá", reply_markup=markup)

# Handling /help command
@bot.message_handler(commands=['help'])
def send_help(message):
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    user = cursor.fetchone()
    
    markup = types.InlineKeyboardMarkup()

    if not user:
        itembtn_register_person = types.InlineKeyboardButton('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥', callback_data='register_person')
        markup.add(itembtn_register_person)
    
    itembtn_search_product = types.InlineKeyboardButton('üîé –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data='search_product')
    itembtn_myprofile = types.InlineKeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
    itembtn_sendaddress = types.InlineKeyboardButton('üè¢ –ê–¥—Ä–µ—Å –≤ –ö–∏—Ç–∞–µ', callback_data='send_address')
    markup.add(itembtn_search_product)
    markup.add(itembtn_myprofile)
    markup.add(itembtn_sendaddress)
    
    if chat_id in admin_users:
        itembtn_register_product = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data='register_product')
        itembtn_user_list = types.InlineKeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='user_list')
        itembtn_product_list = types.InlineKeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='product_list')
        markup.add(itembtn_register_product)
        markup.add(itembtn_user_list)
        markup.add(itembtn_product_list)
    
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.", reply_markup=markup)

# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    #—Ä–µ–∫–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    if call.data == 'register_person':
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, process_name_step)
    #–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—ã–ª–∫–∏
    elif call.data == 'register_product':
        if chat_id in admin_users:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å —Ç–æ–≤–∞—Ä–∞–º–∏.")
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
    #–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤
    elif call.data == 'search_product':
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_search_product)
    #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    elif call.data == 'user_list':
        if chat_id in admin_users:
            send_user_list(call.message)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–∫–∏
    elif call.data == 'product_list':
        if chat_id in admin_users:
            send_product_list(call.message)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.")
    #–û—Ç–ø—Ä–∞–≤–∫–∞ –®–∞–±–ª–æ–Ω —Ñ–∞–π–ª Excel
    elif call.data == 'template_file':
        if chat_id in admin_users:
            send_template_file(call.message)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.")
    #–û—Ç–ø—Ä–∞–≤–∫–∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    elif call.data == 'my_profile':
        send_profile(call.message)
    #–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥—Ä–µ—Å –≤ –∫–∏—Ç–∞–µ
    elif call.data == 'send_address':
        send_default_warehouse_address(call.message)
    #–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–∞—è –º–µ–Ω—é
    elif call.data == 'cancel':
        send_welcome(call.message)
    #–û—Ç–ø—Ä–∞–≤–∫–∞ –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω
    elif call.data.startswith('region_'):
        region = call.data.split('_')[1]
        chat_id = call.message.chat.id
        cursor.execute("UPDATE users SET region=? WHERE chat_id=?", (region, chat_id))
        conn.commit()
        bot.send_message(chat_id, f"–í–∞—à —Ä–µ–≥–∏–æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {region}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 996778050105 –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        bot.register_next_step_handler(call.message, process_phone_step)

def process_name_step(message):
    try:
        chat_id = message.chat.id
        user_data = {}
        user_data['name'] = message.text

        # Generate a random person code (ABC-123456 format)
        user_data['person_code'] = generate_person_code()

        cursor.execute("INSERT INTO users (chat_id, name, person_code) VALUES (?, ?, ?)",
                       (chat_id, user_data['name'], user_data['person_code']))
        conn.commit()

        markup = types.InlineKeyboardMarkup()
        regions = ["üá∞üá¨ –û—à", "üá∞üá¨ –ë–∏—à–∫–µ–∫", "üá∞üá¨ –ö–∞—Ä–∞-–°—É—É", "üá∞üá¨ –ö–∞–¥–∞–º–∂–∞–π"]
        for region in regions:
            itembtn_region = types.InlineKeyboardButton(region, callback_data=f'region_{region}')
            markup.add(itembtn_region)
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    except Exception as e:
        bot.send_message(chat_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

def process_phone_step(message):
    try:
        chat_id = message.chat.id
        user_data = {}
        user_data['phone'] = message.text

        cursor.execute("UPDATE users SET phone=? WHERE chat_id=?", (user_data['phone'], chat_id))
        conn.commit()

        # Registration successful message
        cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
        user = cursor.fetchone()
        registration_message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n \n üë§–í–∞—à–µ –∏–º—è: {user[2]}\nüîë–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥: {user[3]}\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\nüèôÔ∏è–†–µ–≥–∏–æ–Ω: {user[5]}."
        bot.send_message(message.chat.id, registration_message)

        # Update keyboard markup to remove /register button
        send_welcome(message)
    except Exception as e:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


# Handling document uploads (for admin users)
@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        if message.from_user.id not in admin_users:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        # Sending loading message
        loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...')

        file_info = bot.get_file(message.document.file_id)
        file_path = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

        # Simulating a delay for loading
        time.sleep(2)

        # Assuming the file is in xlsx format
        df = pd.read_excel(file_path)

        # Process each row in the dataframe
        for index, row in df.iterrows():
            product_code = str(row['Product Code'])
            product_weight = str(row['Product Weight'])
            product_type = str(row['Product Type'])

            try:
                cursor.execute("INSERT INTO products (product_code, weight, type) VALUES (?, ?, ?)",
                               (product_code, product_weight, product_type))
                conn.commit()
            except sqlite3.IntegrityError:
                bot.send_message(message.chat.id, f"üö´–û—à–∏–±–∫–∞: –ü–æ—Å—ã–ª–∫–∞ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º {product_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        # Update loading message with success message
        bot.edit_message_text("‚úÖ –ü–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", chat_id=message.chat.id, message_id=loading_message.message_id)
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

# Function to search for a product by its code
def process_search_product(message):
    loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫-–∫–æ–¥–∞...')

    # Simulating a delay for loading
    time.sleep(2)
    
    product_code = message.text.strip()

    cursor.execute("SELECT * FROM products WHERE product_code=?", (product_code,))
    product = cursor.fetchone()

    if product:
        result_message = f"‚úÖ–¢—Ä–µ–∫-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω\n\nüì¶–¢—Ä–µ–∫-–∫–æ–¥: _{product[1]}_\nüì¶–¢–∏–ø –ø–æ—Å—ã–ª–∫–∞: {product[3]}\n‚öñÔ∏è–í–µ—Å: {product[2]}"
    else:
        result_message = "üö´ –¢—Ä–µ–∫-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # Update loading message with the result
    bot.edit_message_text(result_message, chat_id=message.chat.id, message_id=loading_message.message_id, parse_mode="Markdown")

    # Add a button to trigger /search_product again
    markup = types.InlineKeyboardMarkup()
    itembtn_search_product = types.InlineKeyboardButton('üîé –ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑', callback_data='search_product')
    itembtn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    markup.add(itembtn_search_product,itembtn_cancel)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫-–∫–æ–¥?", reply_markup=markup)

# Function to generate a random person code
def generate_person_code():
    letters = 'ABC'
    digits = '0123456789'
    code = ''.join((letters)) + '-' + ''.join(random.choice(digits) for _ in range(6))
    return code

def send_template_file(message):
    try:
        template_file_path = "–®–∞–±–ª–æ–Ω.xlsx"  # Path to your template file
        with open(template_file_path, 'rb') as template_file:
            bot.send_document(message.chat.id, template_file)
        
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

# Function to send user profile information
def send_profile(message):
    loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...')
    
    # Simulating a delay for loading
    time.sleep(2)
    
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    user = cursor.fetchone()
    
    if user:
        profile_message = f"üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\nüÜîTG-id: `{user[1]}`\n*================* \n\nüë§–í–∞—à–µ –∏–º—è: *{user[2]}* \nüîë –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥: *{user[3]}*\n üìû–¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n üèôÔ∏è–†–µ–≥–∏–æ–Ω –ü–í–ó: {user[5]} "
        markup = types.InlineKeyboardMarkup()
        itembtn_cancel = types.InlineKeyboardButton('üìÑ –ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é', callback_data='cancel')
        markup.add(itembtn_cancel)
        bot.edit_message_text(profile_message, chat_id=message.chat.id, message_id=loading_message.message_id, reply_markup=markup, parse_mode='Markdown')
    else:
        bot.edit_message_text("‚ö†Ô∏è–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", chat_id=message.chat.id, message_id=loading_message.message_id)

# Function to send the list of registered users (for admin)
def send_user_list(message):
    loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...')
    
    # Simulating a delay for loading
    time.sleep(2)
    
    try:
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        
        if not users:
            bot.edit_message_text("‚ö†Ô∏è–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", chat_id=message.chat.id, message_id=loading_message.message_id)
            return

        user_list = []

        for user in users:
            user_list.append({
                'Chat-id': user[1],
                '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞': user[2],
                '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥': user[3],
                '–¢–µ–ª–µ—Ñ–æ–Ω': user[4],
                '–†–µ–≥–∏–æ–Ω –ü–í–ó': user[5]
            })

        df = pd.DataFrame(user_list)
        current_datetime = datetime.now().strftime('%d-%m-%Y %H-%M-%S')
        # Save the DataFrame to an Excel file
        file_path = f"–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç {current_datetime}.xlsx"
        df.to_excel(file_path, index=False)

        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file)
            markup = types.InlineKeyboardMarkup()
            itembtn_cancel = types.InlineKeyboardButton('üìÑ –ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é', callback_data='cancel')
            markup.add(itembtn_cancel)
            bot.send_message(message.chat.id, "üìÇ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª!", reply_markup=markup)

        # Remove the file after sending
        os.remove(file_path)

        # Update loading message with success message
        bot.edit_message_text("‚úÖ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.", chat_id=message.chat.id, message_id=loading_message.message_id)
    except Exception as e:
        bot.edit_message_text('‚ö†Ô∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.', chat_id=message.chat.id, message_id=loading_message.message_id)

def send_product_list(message):
    loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...')
    
    # Simulating a delay for loading
    time.sleep(2)
    
    try:
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
        
        if not products:
            bot.edit_message_text("–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", chat_id=message.chat.id, message_id=loading_message.message_id)
            return

        product_list = []

        for product in products:
            product_list.append({
                '–¢—Ä–µ–∫-–∫–æ–¥': product[1],
                '–í–µ—Å, –∫–≥': product[2],
                '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞': product[3]
            })

        df = pd.DataFrame(product_list)

        # Save the DataFrame to an Excel file
        current_datetime = datetime.now().strftime('%d-%m-%Y %H-%M-%S')
        file_path = f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ {current_datetime}.xlsx"
        df.to_excel(file_path, index=False)

        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file)
            markup = types.InlineKeyboardMarkup()
            itembtn_cancel = types.InlineKeyboardButton('üìÑ –ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é', callback_data='cancel')
            markup.add(itembtn_cancel)
            bot.send_message(message.chat.id, "üìÇ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª!", reply_markup=markup)

        

        # Remove the file after sending
        os.remove(file_path)

        # Update loading message with success message
        bot.edit_message_text("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.", chat_id=message.chat.id, message_id=loading_message.message_id)
    except Exception as e:
        bot.edit_message_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.', chat_id=message.chat.id, message_id=loading_message.message_id)

# Function to send the default warehouse address with client details
def send_default_warehouse_address(message):
    loading_message = bot.send_message(message.chat.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞...')
    
    # Simulating a delay for loading
    time.sleep(2)
    
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    user = cursor.fetchone()
    
    if user:
        address_message = f"{user[3]}\n{default_warehouse_address}\n{user[2]} ({user[4]})"
        markup = types.InlineKeyboardMarkup()
        itembtn_cancel = types.InlineKeyboardButton('üìÑ –ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é', callback_data='cancel')
        markup.add(itembtn_cancel)
        bot.edit_message_text(address_message, chat_id=message.chat.id, reply_markup=markup,message_id=loading_message.message_id)
    else:
        bot.edit_message_text("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥.", chat_id=message.chat.id, message_id=loading_message.message_id)

# Start polling
bot.polling()
